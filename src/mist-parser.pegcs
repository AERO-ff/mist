/**
 *
 *     _|      _|  _|              _|
 *     _|_|  _|_|        _|_|_|  _|_|_|_|
 *     _|  _|  _|  _|  _|_|        _|
 *     _|      _|  _|      _|_|    _|
 *     _|      _|  _|  _|_|_|        _|_|
 *
 *             MIST BUILD SYSTEM
 * Copyright (c) 2015 On Demand Solutions, inc.
 *       Released under the MIT License
 */

{
  MistNinjaBuilder = require './mist-ninja-builder'

  @builder = new MistNinjaBuilder
  @builder.setRootDir options.mistdir # TODO: set to root dir, not cd
  @builder.setDir options.mistdir
}

mistfile
  = _? statements:(s:statement _? {s})+
    {@builder.render()}
  ;

statement
  = s:statement_rule
    {@builder.addTarget s}
  / s:statement_vardecl
    {@builder.setVar s.name, s.val}
  ;

statement_rule
  = ':'
    foreach:(_? "foreach")?
    main_inputs:(_? i:glob_list {i})?
    dep_inputs:(_? '|' _? i:glob_list {i})?
    order_inputs:(_? '||' _? i:glob_list {i})?
    command:(_? cmd:rule_command {cmd})
    main_outputs:(_? i:delim_path_list {i})?
    aux_outputs:(_? '|' _? i:delim_path_list {i})?
    ___* _
    {
      type: 'rule'
      foreach: (if foreach? then yes else no)
      main_inputs: main_inputs || []
      dep_inputs: dep_inputs || []
      order_inputs: order_inputs || []
      command: command
      main_outputs: main_outputs || []
      aux_outputs: aux_outputs || []
    }
  ;

rule_command
  = '|>' _? cmd:((!(_? '|>')) c:substitute_itr {c})+ _? '|>'
    {cmd.join ''}
  ;

delim_path_list
  = first:delim_path others:(_ d:delim_path {d})*
    {[first].concat (others || [])}
  ;

delim_path
  = c:delim_path_char+
    {c.join ''}
  ;

delim_path_char
  = variable_ref
  / [a-z0-9\/\.\-\_\~\%]i
  ;

glob_list
  = first:glob others:(_ g:glob {g})* _
    {[first].concat (others || [])}
  ;

glob
  = cf:glob_char co:(glob_char/'|')*
    {([cf].concat co).join ''}
  ;

glob_char
  = variable_ref
  / [a-z0-9\/\*\.\-\_\~\{\}\(\)\@\?\[\]\!]i
  ;

statement_vardecl
  = name:variable_name _? '=' _? val:substitute_string
    {
      type: 'var'
      name: name
      val: val
    }
  ;

substitute_string
  = str:substitute_itr+
    {str.join ''}
  ;

substitute_itr
  = variable_ref
  / [^\r\n]
  ;

variable_ref
  = '$(' _? name:variable_name _? ')'
    {
      val = @builder.getVar name
      if val then val
      else
        console.warn 'mist: unknown variable \'' + name + '\'',
          '\n    at', options.mistfile + ':' + line() + ':' + column()
        return ''
    }
  ;

variable_name
  = $([a-z0-9_]i+)
  ;

_ ""
  = __+
  ;

__ ""
  = ___
  / [\r\n]
  / comment
  ;

___ ""
  = [ \t]
  ;

comment ""
  = '#' [^\r\n]*
  ;

