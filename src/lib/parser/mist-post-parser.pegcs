/**
 *
 *     _|      _|  _|              _|
 *     _|_|  _|_|        _|_|_|  _|_|_|_|
 *     _|  _|  _|  _|  _|_|        _|
 *     _|      _|  _|      _|_|    _|
 *     _|      _|  _|  _|_|_|        _|_|
 *
 *             MIST BUILD SYSTEM
 * Copyright (c) 2015 On Demand Solutions, inc.
 *       Released under the MIT License
 */

{
  @mist = options.mist
}

mistfile
  = ((_ws / _nl)+)? (_ws? line (_nl / !.))*
  ;

line
  = comment
  / statement _ws? comment?
  ;

statement
  = statement_rule
  / statement_vardecl
  ;

statement_rule
  = ':'
    foreach:(_ws? o:rule_foreach {o})?
    inputs:(_ws? o:rule_inputs {o})?
    dependencies:(_ws? o:rule_dependencies {o})?
    orderDependencies:(_ws? o:rule_order_dependencies {o})?
    command:(_ws? o:rule_command {o})
    outputs:(_ws? o:rule_outputs {o})?
    auxOutputs:(_ws? o:rule_aux_outputs {o})?
    groups:(_ws? o:rule_groups {o})?
    {
      @mist.addRule
        foreach: foreach
        inputs: inputs
        dependencies: dependencies
        orderDependencies: orderDependencies
        command: command
        outputs: outputs
        auxOutputs: auxOutputs
        groups: groups
    }
  ;

rule_foreach "foreach"
  = 'foreach'
  ;

rule_inputs "input list"
  = first:(glob / group_reference)
    rest:(_ws d:(glob / group_reference) {d})*
    {[first].concat rest || []}
  ;

rule_dependencies "dependencies"
  = !('||'/'|>') '|' _ws? list:rule_dependency_list
    {list}
  ;

rule_order_dependencies "order dependencies"
  = '||' _ws? list:rule_dependency_list
    {list}
  ;

rule_command "command"
  = '|>' _ws? command:$((!'|>').)+ _ws? '|>'
    {command.trim()}
  ;

rule_outputs "outputs"
  = rule_output_list
  ;

rule_aux_outputs "aux outputs"
  = '|' _ws? list:rule_output_list
    {list}
  ;

rule_groups "groups"
  = '->' _ws? first:identifier rest:(_ws i:identifier {i})*
    {[first].concat rest}
  ;

rule_output_list
  = first:delimited_path
    rest:(_ws d:delimited_path {d})*
    {[first].concat rest || []}
  ;

rule_dependency_list
  = first:(group_reference / delimited_path / glob)
    rest:(_ws d:(group_reference / delimited_path / glob) {d})*
    {[first].concat rest || []}
  ;

statement_vardecl "variable declaration"
  = name:identifier
    _ws? '+'? '='
    _ws? value:(any_string / $[^\r\n]+)?
    {@mist.set name, value} /* to be expanded (ref #34) */
  ;

delimited_path
  = path:$('/'? delimited_path_leaf)+
    {type: 'simple', value: path}
  ;

delimited_path_leaf
  = (!'->' file_character / '%')+
  ;

glob "glob pattern"
  = glob:$('/'? glob_leaf)+
    {type: 'glob', value: glob}
  ;

glob_leaf
  = (glob_matcher / glob_class / '*' / file_character / '?')+
  ;

glob_matcher
  = [!?+*@] '(' glob_leaf ('|' glob_leaf)* ')'
  ;

glob_class
  = '[' (glob_class_escape_character / [^\]])* ']'
  ;

glob_class_escape_character
  = '\\\\'
  / '\\]'
  ;

group_reference "group reference"
  = '!' name:identifier
    {type: 'group', value: name}
  ;

file_character
  = [a-z0-9-._]i
  ;

identifier "identifier"
  = $[a-z0-9_]i+
  ;

any_string "string"
  = double_string
  / single_string
  ;

double_string
  = '"' str:(escape_character / [^'])* '"'
    {
      try
        backslash str.join ''
      catch e
        e.column = (e.column || 0) + column()
        e.line = line()
        throw e
    }
  ;

single_string
  = "'" str:$(escape_character / [^'])* "'"
    {
      try
        backslash str.join ''
      catch e
        e.column = (e.column || 0) + column()
        e.line = line()
        throw e
    }
  ;

escape_character
  = '\\\\'
  / '\\"'
  / "\\'"
  ;

comment "comment"
  = '#' (!_nl .)*
  ;

_ws "whitespace"
  = [ \t]+
  ;

_nl "EOL"
  = [\r\n]+
  ;
